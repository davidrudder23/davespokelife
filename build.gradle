buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.1.RELEASE")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'

jar {
    baseName = 'davespokelife'
    version =  '0.2.0'
}

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    // tag::actuator[]
    compile("org.springframework.boot:spring-boot-starter-actuator")
    // end::actuator[]
    // tag::tests[]
    testCompile("org.springframework.boot:spring-boot-starter-test")
    // end::tests[]
    
    compile 'com.github.Grover-c13:PokeGOAPI-Java:3df35dad26'
    compile 'com.squareup.okhttp3:okhttp:3.4.0-RC1'
    compile 'com.google.apis:google-api-services-oauth2:v1-rev117-1.22.0'
    
}
test {
    testLogging {
        // Make sure output from
        // standard out or error is shown
        // in Gradle output.
        showStandardStreams = true
 
        // Or we use events method:
        // events 'standard_out', 'standard_error'
 
        // Or set property events:
        // events = ['standard_out', 'standard_error']
 
        // Instead of string values we can
        // use enum values:
        // events org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_OUT,
        //        org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_ERROR,
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}
